// <auto-generated />
using System;
using JetstreamSkiserviceAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JetstreamSkiserviceAPI.Migrations
{
    [DbContext(typeof(RegistrationsContext))]
    partial class RegistrationsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Attempts = 0,
                            Password = "password",
                            Username = "admin"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee1"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee2"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee3"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee4"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee5"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee6"
                        },
                        new
                        {
                            EmployeeId = 8,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee7"
                        },
                        new
                        {
                            EmployeeId = 9,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee8"
                        },
                        new
                        {
                            EmployeeId = 10,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee9"
                        },
                        new
                        {
                            EmployeeId = 11,
                            Attempts = 0,
                            Password = "password",
                            Username = "employee10"
                        });
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            PriorityName = "Tief"
                        },
                        new
                        {
                            PriorityId = 2,
                            PriorityName = "Standard"
                        },
                        new
                        {
                            PriorityId = 3,
                            PriorityName = "Express"
                        });
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("Pickup_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("RegistrationId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Registrations");

                    b.HasData(
                        new
                        {
                            RegistrationId = 1,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4402),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4444),
                            Price = "50",
                            PriorityId = 1,
                            ServiceId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            RegistrationId = 2,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4449),
                            Email = "Tim@mustermann.com",
                            FirstName = "Tim",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4450),
                            Price = "60",
                            PriorityId = 2,
                            ServiceId = 2,
                            StatusId = 2
                        },
                        new
                        {
                            RegistrationId = 3,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4453),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4454),
                            Price = "70",
                            PriorityId = 3,
                            ServiceId = 3,
                            StatusId = 3
                        },
                        new
                        {
                            RegistrationId = 4,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4457),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4459),
                            Price = "80",
                            PriorityId = 1,
                            ServiceId = 4,
                            StatusId = 4
                        },
                        new
                        {
                            RegistrationId = 5,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4461),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4463),
                            Price = "90",
                            PriorityId = 2,
                            ServiceId = 5,
                            StatusId = 1
                        },
                        new
                        {
                            RegistrationId = 6,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4465),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4467),
                            Price = "100",
                            PriorityId = 3,
                            ServiceId = 6,
                            StatusId = 2
                        },
                        new
                        {
                            RegistrationId = 7,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4470),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4471),
                            Price = "110",
                            PriorityId = 1,
                            ServiceId = 1,
                            StatusId = 3
                        },
                        new
                        {
                            RegistrationId = 8,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4474),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4475),
                            Price = "120",
                            PriorityId = 2,
                            ServiceId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            RegistrationId = 9,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4478),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4479),
                            Price = "130",
                            PriorityId = 3,
                            ServiceId = 3,
                            StatusId = 2
                        },
                        new
                        {
                            RegistrationId = 10,
                            Comment = "Testkommentar",
                            Create_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4481),
                            Email = "max@mustermann.com",
                            FirstName = "Max",
                            LastName = "Muster",
                            Phone = "0791234567",
                            Pickup_date = new DateTime(2023, 12, 27, 1, 48, 24, 358, DateTimeKind.Local).AddTicks(4483),
                            Price = "140",
                            PriorityId = 1,
                            ServiceId = 4,
                            StatusId = 3
                        });
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            ServiceName = "Kleiner Service"
                        },
                        new
                        {
                            ServiceId = 2,
                            ServiceName = "Grosser Service"
                        },
                        new
                        {
                            ServiceId = 3,
                            ServiceName = "Rennski Service"
                        },
                        new
                        {
                            ServiceId = 4,
                            ServiceName = "Bindungen montieren und einstellen"
                        },
                        new
                        {
                            ServiceId = 5,
                            ServiceName = "Fell zuschneiden"
                        },
                        new
                        {
                            ServiceId = 6,
                            ServiceName = "Heisswachsen"
                        });
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Offen"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "InArbeit"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "abgeschlossen"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "storniert"
                        });
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Registration", b =>
                {
                    b.HasOne("JetstreamSkiserviceAPI.Models.Priority", "Priority")
                        .WithMany("Registrations")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JetstreamSkiserviceAPI.Models.Service", "Service")
                        .WithMany("Registrations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JetstreamSkiserviceAPI.Models.Status", "Status")
                        .WithMany("Registrations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("Service");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Priority", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Service", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("JetstreamSkiserviceAPI.Models.Status", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
